<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:imaps="http://www.mulesoft.org/schema/mule/imaps"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
      xmlns:cometd="http://www.mulesoft.org/schema/mule/ajax"
      xmlns:json="http://www.mulesoft.org/schema/mule/json"
      xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz"
      xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/3.0/mule-quartz.xsd
       http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/3.0/mule-json.xsd
       http://www.mulesoft.org/schema/mule/imaps http://www.mulesoft.org/schema/mule/imaps/3.0/mule-imaps.xsd
       http://www.mulesoft.org/schema/mule/ajax http://www.mulesoft.org/schema/mule/ajax/3.0/mule-ajax.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.0/mule.xsd
       http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/3.0/mule-http.xsd
       http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/3.0/mule-xml.xsd
       http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.0/mule-vm.xsd">

    <spring:beans>
        <spring:import resource="classpath:components.xml"/>
    </spring:beans>

    <vm:connector name="vmConnector" queueEvents="true"/>

    <http:connector name="defaultHttpConnector"/>

    <!-- # Transformer Definitions -->

    <mulexml:xslt-transformer name="FraudlabsXSLT" xsl-file="xsl/IP2LocationToSender.xsl"/>
    <mulexml:xslt-transformer name="HostIpXSLT" xsl-file="xsl/HostIpToSender.xsl"/>

    <mulexml:xml-to-object-transformer name="XmlToSender">
        <mulexml:alias name="sender" class="org.mule.example.geomail.dao.Sender"/>
    </mulexml:xml-to-object-transformer>

    <json:object-to-json-transformer name="SenderToJson" sourceClass="org.mule.example.geomail.dao.Sender"/>

    <custom-transformer name="IP2Sender" class="org.mule.example.geomail.transformers.IPToSender">
        <spring:property name="senderDao" ref="senderDao"/>
    </custom-transformer>

    <custom-filter name="inCacheFilter" class="org.mule.example.geomail.routing.InCacheFilter">
        <spring:property name="senderDao" ref="senderDao"/>
    </custom-filter>

    <!-- # Channel Definitions -->

    <!-- Todo add your email server here, note that Gmail, Yahoo, etc cannot be used since they do not set the sender ip addrsss -->
    <!--<imaps:endpoint name="Input" host="imap.mycompany.com" user="x" password="y"/>-->

    <quartz:endpoint name="quartzTrigger" repeatInterval="2000" jobName="dataGenerator">
        <quartz:event-generator-job/>
    </quartz:endpoint>

    <vm:endpoint name="Gatekeeper" path="channels/gatekeeper"/>
    <vm:endpoint name="Geocoder" path="channels/geocoder"/>
    <vm:endpoint name="Fraudlabs" path="channels/fraudlabs"/>
    <vm:endpoint name="Positions" path="channels/positions"/>
    <vm:endpoint name="Storage" path="channels/storage"/>
    <vm:endpoint name="Aggregator" path="channels/positions/aggregator"/>

    <cometd:servlet-endpoint name="Output" path="/GEOMAIL" transformer-refs="SenderToJson"/>

    <model>

        <service name="DataGeneratorMailService">
            <description>
                A service used to create test data. It uses a quartz endpoint to trigger the test method and generates
                random ip addresses. This mimics the Mailservice receiving an email and retrieving the from IP address.
            </description>
            <inbound>
                <inbound-endpoint ref="quartzTrigger"/>
            </inbound>
            <component>
                <spring-object bean="mailGeneratorComponent"/>
            </component>
            <outbound>
                <list-message-splitter-router>
                    <outbound-endpoint ref="Gatekeeper"/>
                </list-message-splitter-router>
            </outbound>
        </service>

        <service name="MailService">
            <description>
                Component receives email and sends out the trail of IP-addresses as individual messages.
            </description>
            <!--<inbound>-->
            <!-- TODO <inbound-endpoint ref="Input"/>-->
            <!--</inbound>-->

            <component>
                <spring-object bean="mailComponent"/>
            </component>

            <outbound>
                <list-message-splitter-router>
                    <outbound-endpoint ref="Gatekeeper"/>
                </list-message-splitter-router>
            </outbound>
        </service>

        <service name="GatekeeperService">
            <description>
                Only sends IP that are not in the database on to GeoCoding
            </description>
            <inbound>
                <inbound-endpoint ref="Gatekeeper"/>
            </inbound>

            <outbound>
                <filtering-router>
                    <outbound-endpoint ref="Geocoder"/>
                    <not-filter>
                        <filter ref="inCacheFilter"/>
                    </not-filter>
                </filtering-router>

                <filtering-router>
                    <outbound-endpoint ref="Positions" transformer-refs="IP2Sender"/>
                    <filter ref="inCacheFilter"/>
                </filtering-router>
            </outbound>

        </service>

        <service name="HostipInfoService">
            <description>
                Uses the HostIP web service to lookup location information about the current IP address. Note that
                if the invocation of the HostIP Web Service fails, the fraudlabs web service will be used as a backup
            </description>
            <inbound>
                <inbound-endpoint ref="Geocoder"/>
            </inbound>

            <http:rest-service-component serviceUrl="http://api.hostip.info" httpMethod="GET">
                <http:payloadParameterName value="ip"/>
            </http:rest-service-component>

            <outbound>
                <pass-through-router>
                    <outbound-endpoint ref="Storage" transformer-refs="HostIpXSLT XmlToSender"/>
                </pass-through-router>
            </outbound>

            <default-service-exception-strategy>
                <outbound-endpoint ref="Fraudlabs"/>
            </default-service-exception-strategy>

        </service>

        <service name="FraudlabsService">
            <description>
                This is the backup GeoLocation service used to find location info for an IP address
            </description>
            <inbound>
                <inbound-endpoint ref="Fraudlabs"/>
            </inbound>

            <http:rest-service-component
                    serviceUrl="http://ws.fraudlabs.com/ws.fraudlabs.com_non_ssl/ip2locationwebservice.asmx/IP2Location?LICENSE=02-J73Z-N42F"
                    httpMethod="POST">
                <http:payloadParameterName value="IP"/>
            </http:rest-service-component>

            <outbound>
                <pass-through-router>
                    <outbound-endpoint ref="Storage" transformer-refs="FraudlabsXSLT XmlToSender"/>
                </pass-through-router>
            </outbound>

        </service>

        <service name="StorageService">
            <description>
                This service is responsible for storing the Sender location information so that we do not need to
                lookup the information the next time the same IP address is used.
            </description>
            <inbound>
                <inbound-endpoint ref="Storage"/>
            </inbound>

            <component>
                <spring-object bean="storageComponent"/>
            </component>

            <outbound>
                <pass-through-router>
                    <outbound-endpoint ref="Aggregator"/>
                </pass-through-router>
            </outbound>
        </service>


        <service name="ValidPositionAggregatorService">
            <description>
                This service filters out any Senders that we couldn't find latitude and longitude coordinates for, it
                sends the valid
                senders as an ajax event to the browser.
            </description>
            <inbound>
                <inbound-endpoint ref="Aggregator"/>
                <selective-consumer-router>
                    <expression-filter evaluator="groovy"
                                       expression="payload.latitude != null &amp; payload.longitude != null"/>
                </selective-consumer-router>
            </inbound>

            <outbound>
                <pass-through-router>
                    <outbound-endpoint ref="Output"/>
                </pass-through-router>
            </outbound>
        </service>

    </model>

</mule>